plugins {
    alias(libs.plugins.springBoot)
    alias(libs.plugins.dependencyManagement)
    alias(libs.plugins.flyway)
    alias(libs.plugins.jooq)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    jooqGenerator libs.jooqCodegen
    testImplementation libs.springdocUi
    implementation libs.springdocApi
    implementation libs.springAiOpenai
    implementation libs.micrometer
    implementation libs.awsSdk
    implementation libs.thumbnailator
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation libs.jjwtApi
    runtimeOnly libs.jjwImpl
    runtimeOnly libs.jjwJackson
    compileOnly 'org.projectlombok:lombok'
    jooqGenerator 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    implementation libs.mapstruct
    annotationProcessor libs.mapstructProcessor
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def getConfigProperty(String key, String defaultValue) {
    def value = System.getenv(key)
    if (value != null) return value

    value = System.getProperty(key)
    if (value != null) return value

    value = project.hasProperty(key) ? project.property(key) : null
    if (value != null) return value

    return defaultValue
}

flyway {
    url = getConfigProperty('SPRING_FLYWAY_URL', '')
    user = getConfigProperty('SPRING_FLYWAY_USER', '')
    password = getConfigProperty('SPRING_FLYWAY_PASSWORD', '')
    locations = getConfigProperty('SPRING_FLYWAY_LOCATIONS', '').split(',')
}

jooq {
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = getConfigProperty('SPRING_DATASOURCE_URL', '')
                    user = getConfigProperty('SPRING_DATASOURCE_USERNAME', '')
                    password = getConfigProperty('SPRING_DATASOURCE_PASSWORD', '')
                }

                generator {
                    target {
                        packageName = 'com.syschallenge'
                        directory = 'build/generated-src/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
